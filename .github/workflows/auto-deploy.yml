name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["deploy-gh-pages"]

  # to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  FRONT_PATH: "./frente" # Updated to use frente subfolder
  PYTHON_PATH: "./espalda" # Path to Python application

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
            
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: ${{ env.FRONT_PATH }}/package-lock.json
     
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
   
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.FRONT_PATH }}
  
      - name: Build with Astro
        run: |
          npx --no-install astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.FRONT_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.FRONT_PATH }}/dist

  # python-app:
  #   name: Run Python Application
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
      
  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'
      
  #     - name: Install Python dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install uvicorn
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #       working-directory: ${{ env.PYTHON_PATH }}
      
  #     # Run the Python app in the background
  #     - name: Start Python application
  #       run: |
  #         # Start uvicorn in the background
  #         nohup uvicorn main:app --reload --host 0.0.0.0 --port 8000 &
  #         # Wait a bit to ensure the server starts
  #         sleep 10
  #         # Optional: Check if the server is running
  #         curl -f http://localhost:8000/ || echo "Server might not have a root endpoint"
  #       working-directory: ${{ env.PYTHON_PATH }}
      
  #     # Optional: Run tests or other checks here
  #     - name: Run tests (if any)
  #       run: |
  #         # Add your test commands here if needed
  #         echo "Add test commands here"
  #       working-directory: ${{ env.PYTHON_PATH }}

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4